PKGFILE(5)

# NAME

pkgmk.Pkgfile - package build script for pkgmk

# SYNOPSIS

*Pkgfile*

# DESCRIPTION

A _Pkgfile_ specifies how a software package is built by *pkgmk*(8).
It defines package metadata and provides the build instructions that
compile and stage files into a package root directory.

# FILE FORMAT

A _Pkgfile_ is a POSIX *sh*(1p) script.
It may contain variable assignments, function definitions, and
standard shell constructs.
Lines beginning with '*#*' are comments.

The following sections describe the variables and functions recognized
by *pkgmk*(8).

## Variables

The following variables are required:

*name*
	Package name.

	The package source directory name must match this value.
	Example: "/usr/src/pkgsrc-desktop/xterm" -> "name=xterm"

*version*
	Package version.
	Corresponds to the upstream software version.

*release*
	Package release number (incremented when the packaging changes
	but the upstream version does not).

*source*
	One or more source URIs or local paths, whitespace-separated.

	Supports variable substitution:

	```
	source=http://foo.org/$name-$version.tar.gz
	```

	Multiple sources may be listed using quotes and newlines:

	```
	source="http://foo.org/$name-$version.tar.gz
	        fix-build.patch"
	```

	Files may be renamed on download with '*::*' to avoid
	collisions:

	```
	source="$name-$version.tar.gz::http://foo.org/v$version.tar.gz
	        $name-$version.patch::http://foo.org/fix-build.patch"
	```

	Using '$name' and '$version' ensures automatic updates when
	these variables change.

## Functions

The following function is required:

*build()*
	Builds the software and installs files into the staging
	directory ('*$PKG*').

	Within *build()*, the following variables are provided:

	*$SRC*
		Directory containing extracted sources.
	*$PKG*
		Staging directory representing the package root.

	All files must be installed under _$PKG_, never directly into
	system directories.

	Example:

	```
	build() {
		cd $name-$version
		./configure --prefix=/usr
		make
		make DESTDIR=$PKG install
	}
	```

	Command failures stop the build automatically.
	For explicit error handling, use standard shell idioms:

	```
	if ! command ... ; then
		# Handle error
	fi

	command || {
		# Handle error
	}
	```

## Metadata header

Although ignored by *pkgmk*(8), a metadata header is strongly
recommended.
It is parsed by *pkgman*(1) and related tools.

*Description*
	Short factual description of the software (no trailing dot).

*Maintainer*
	Name and e-mail (obfuscated if preferred).

*URL*
	Project website.

*Depends on*
	Space-separated list of dependencies (omit if none).

Example:

```
# Description: Lightweight terminal emulator
# Maintainer:  Joe Maintainer <joe@example.org>
# URL:         https://www.eterm.org/
# Depends on:  imlib2
```

# FILES

_Pkgfile_
	The package build script, located in the package's source
	directory.

# EXAMPLES

Minimal example:

```
# Description: Concise description w/o articles and trailing dot
# URL:         http://www.gnu.org/software/somelib/index.html
# Maintainer:  Joe Maintainer, joe at myfantasticisp dot net
# Depends on:  someotherlib coolness

name=somelib
version=1.2.3
release=1
source="ftp://ftp.gnu.org/gnu/$name/$name-$version.tar.gz
	Makefile.in.patch"

build() {
	cd $name-$version

	patch -p1 -i ../Makefile.in.patch

	./configure --prefix=/usr

	make V=1
	make DESTDIR=$PKG install

	rm -rf $PKG/usr/info
}
```

# SEE ALSO

*sh*(1p),
*dash*(1)

*pkgmk*(8),
*pkgmk.conf*(5),
*pkgmk.32bit*(5),
*pkgmk.md5sum*(5),
*pkgmk.footprint*(5),
*pkgmk.nostrip*(5)

*packages*(7),
*packaging*(7)

# CAVEATS

The _Pkgfile_ is executed as a shell script.
This allows powerful constructs (functions, loops, conditionals), but
also means that syntax errors or unsafe commands can break the build.
Keep _Pkgfile_ minimal, reproducible, and auditable.

; vim: ft=scdoc cc=72 tw=70
