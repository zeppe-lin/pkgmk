PKGFILE(5)

# NAME

pkgmk.Pkgfile - build file for pkgmk

# SYNOPSIS

*Pkgfile*

# DESCRIPTION

The _Pkgfile_ is a POSIX *sh*(1p) script read by *pkgmk*(8) to build a
package.

It defines the variables *name*, *version*, *release*, and *source*,
and a *build()* function containing the commands to compile and stage
the software in the package root directory.

# FILE FORMAT

The file consists of shell variable assignments and function
definitions.
Comments begin with a hash ('*#*') and extend to the end of the line.

Since _Pkgfile_ is interpreted by the shell, normal shell syntax may
be used, including variable expansion, command substitution, and
conditional statements such as *case* or *if*.
Functions, loops, and other POSIX *sh*(1p) constructs are also
permitted.

The *local* keyword, while not defined by POSIX, is supported by the
shell used to run _Pkgfile_ (typically *dash*(1)) and many other
common shells, and may be used for function-local variables.

## Variables

Every _Pkgfile_ must define the following variables:

*name*
	Package name.

	The package source directory name must match this value.
	Example: "/usr/src/pkgsrc-desktop/xterm" -> "name=xterm"

*version*
	Package version.
	Actually corresponds to upstream software version.

*release*
	Package release number (incremented when the packaging changes
	but the upstream version does not).

*source*
	One or more source URIs or local paths, whitespace-separated.

	Supports variable substitution:

	```
	source=http://foo.org/$name-$version.tar.gz
	```

	Multiple sources may be listed using quotes and newlines:

	```
	source="http://foo.org/$name-$version.tar.gz
	        fix-build.patch"
	```

	Files may be renamed on download with '*::*' to avoid
	collisions:

	```
	source="$name-$version.tar.gz::http://foo.org/v$version.tar.gz
	        $name-$version.patch::http://foo.org/fix-build.patch"
	```

	Using '$name' and '$version' ensures automatic updates when
	these variables change.

## Functions

Every _Pkgfile_ must define a *build()* function.
This function builds the software and installs files into the staging
directory ('$PKG').

Within *build()*, the following environment is available:

*$SRC*
	Directory containing the extracted sources.
	Typically *$SRC/$name-$version*.

*$PKG*
	Staging directory representing the package root.
	All files must be installed under this directory.

Typical workflow in *build()*:

```
build() {
	cd $name-$version

	./configure --prefix=/usr

	make
	make DESTDIR=$PKG install
}
```

Always install under '$PKG', never directly into _/usr_.

Avoid redefining *pkgmk*(8) internal functions or variables.

Most command failures stop the build automatically.
If explicit error handling is needed, use standard shell idioms:

```
if ! command ... ; then
	# Handle the error
fi

command || {
	# Handle the error
}
```

## Metadata header

Although ignored by *pkgmk*(8), a metadata header is strongly
recommended.
It is parsed by *pkgman*(1) and related tools.

*Description*
	Short factual description of the software (no trailing dot).

*Maintainer*
	Name and e-mail (may be obfuscated).

*URL*
	Project website.

*Depends on*
	Space-separated list of dependencies (omit if none).

Example:

```
# Description: Lightweight terminal emulator
# Maintainer:  Joe Maintainer <joe@example.org>
# URL:         https://www.eterm.org/
# Depends on:  imlib2
```

# FILES

_Pkgfile_
	Package build description.
	Located in the package source directory.

# EXAMPLES

Minimal example:

```
# Description: Concise description w/o articles and trailing dot
# URL:         http://www.gnu.org/software/somelib/index.html
# Maintainer:  Joe Maintainer, joe at myfantasticisp dot net
# Depends on:  someotherlib coolness

name=somelib
version=1.2.3
release=1
source="ftp://ftp.gnu.org/gnu/$name/$name-$version.tar.gz
	Makefile.in.patch"

build() {
	cd $name-$version

	patch -p1 -i ../Makefile.in.patch

	./configure --prefix=/usr

	make V=1
	make DESTDIR=$PKG install

	rm -rf $PKG/usr/info
}
```

# SEE ALSO

*pkgmk*(8),
*pkgmk.conf*(5),
*pkgmk.32bit*(5),
*pkgmk.footprint*(5),
*pkgmk.md5sum*(5),
*pkgmk.nostrip*(5),
*sh*(1p),
*dash*(1),
*packages*(7),
*packaging*(7)

# CAVEATS

The _Pkgfile_ is executed as a shell script.
This allows powerful constructs (functions, loops, conditionals), but
also means that syntax errors or unsafe commands can break the build.
Keep _Pkgfile_ minimal and reproducible.

; vim: ft=scdoc cc=72 tw=70
