#!/bin/sh
# pkgmk - make software package
# See COPYING and COPYRIGHT files for corresponding information.

# Intentional: allow "local"s declaration.
# https://www.shellcheck.net/wiki/SC3043
# shellcheck disable=SC3043

######################################################################
# Section: Error codes                                               #
# Define error codes for script exit statuses.                       #
######################################################################

# https://tldp.org/LDP/abs/html/exitcodes.html
readonly E_GENERAL=1     # General error
readonly E_PKGFILE=2     # Invalid Pkgfile (missing variables/functions)
readonly E_DIR_PERM=3    # Directory missing or permission error (source/build directories)
readonly E_DOWNLOAD=4    # Error during source file download
readonly E_UNPACK=5      # Error during source file unpacking
readonly E_MD5=6         # MD5 checksum verification failed
readonly E_FOOTPRINT=7   # Footprint check failure
readonly E_BUILD=8       # Error during package 'build()' function execution
#readonly E_CMDEXEC=126  # Command invoked cannot execute
readonly E_INTERRUPT=130 # Script interrupted or terminated by C-c

######################################################################
# Section: Notification helpers                                      #
# Functions for displaying messages to the user.                     #
######################################################################

# info - Print an informational message to stdout.
# Args:
#   $1: The message string to print.
info() {
	echo "=======> $1"
}

# warning - Print a warning message to stderr.
# Args:
#   $1: The warning message string.
warning() {
	info "WARNING: $1" 1>&2
}

# error - Print an error message to stderr.
# Args:
#   $1: The error message string.
error() {
	info "ERROR: $1" 1>&2
}

# fatal - Print an error message and help reference to stderr, then
# exit.
# Args:
#   $1: The error message string.
fatal() {
	echo "pkgmk: $1" 1>&2
	echo "Try 'pkgmk --help' for more information." 1>&2

	exit $E_GENERAL
}

######################################################################
# Section: Exit hooks                                                #
# Functions to handle script termination (interrupts, exit).         #
######################################################################

# Don't warn about unreachable commands in these functions.
# See trap(1p) for more information.

# https://www.shellcheck.net/wiki/SC2317
# https://www.shellcheck.net/wiki/SC2086

# interrupted - Handle script interruption signals (HUP, INT, QUIT,
# TERM).  Print an interruption message and call atexit before
# exiting.
# shellcheck disable=SC2317,SC2086
interrupted() {
	echo ""                      1>&2
	echo "=======> Interrupted." 1>&2

	# Explicitly call atexit() to ensure cleanup routines are
	# executed on interrupt.
	atexit

	exit $E_INTERRUPT
}

# atexit - Cleanup function to be executed on script exit: delete
# temporary working directories.
# shellcheck disable=SC2317
atexit() {
	remove_work_dir
}

######################################################################
# Section: Pkgmk routines                                            #
# Core functions for package creation, checking, and management.     #
######################################################################

# get_filename - Extract a local filename from a URL or path.
# Args:
#   $1: URL or path string.  Can optionally start with '-a' flag.
# Returns:
#   The local filename to be used for the downloaded source, printed
#   to stdout.
get_filename() {
	local __ABSOLUTE= # Flag to indicate absolute path (unused)

	if [ "$1" = "-a" ]; then
		__ABSOLUTE=1
		shift # Remove the '-a' flag from arguments
	fi

	case $1 in
	   http://*/* |    https://*/* |    ftp://*/* |    file://*/*)
		# Extract filename from URL and prepend
		# PKGMK_SOURCE_DIR
		echo "$PKGMK_SOURCE_DIR/${1##*/}"
		;;
	*::http://*/* | *::https://*/* | *::ftp://*/* | *::file://*/*)
		# Handle prefixed URLs (e.g., 'name.tar.gz::http://')
		# - remove prefix and extract filename
		echo "$PKGMK_SOURCE_DIR/${1%::*}"
		;;
	*)
		# Handle local paths or filenames
		if [ "$__ABSOLUTE" ]; then
			# If -a was specified, treat as absolute path
			# under PKGMK_ROOT
			echo "$PKGMK_ROOT/$1"
		else
			# Otherwise, treat as relative filename
			echo "$1"
		fi
		;;
	esac
}

# get_basename - Extract the basename from a given path.
# Args:
#   $1: Path string.
# Returns:
#   The basename of the path, printed to stdout.
get_basename() {
	echo "${1##*/}"
}

# check_pkgfile - Validate the Pkgfile for required variables and
# functions.
check_pkgfile() {
	if [ ! "${name}" ]; then
		error "Variable 'name' not specified in Pkgfile."
		exit $E_PKGFILE
	elif [ ! "${version}" ]; then
		error "Variable 'version' not specified in Pkgfile."
		exit $E_PKGFILE
	elif [ ! "${release}" ]; then
		error "Variable 'release' not specified in Pkgfile."
		exit $E_PKGFILE
	elif ! command -V "build" 2>/dev/null | grep -qwi function; then
		error "Function 'build' not specified in Pkgfile."
		exit $E_PKGFILE
	fi

	if [ "$(get_basename "$PKGMK_ROOT")" != "${name}" ]; then
		error "Variable 'name' in Pkgfile does not match the package directory name."
		exit $E_PKGFILE
	fi
}

# check_directory - Check if a directory exists and has required
# permissions.
# Args:
#   $1: Directory path to check.
check_directory() {
	if [ ! -d "$1" ]; then
		error "Directory '$1' does not exist."
		exit $E_DIR_PERM
	elif [ ! -w "$1" ]; then
		error "Directory '$1' not writable."
		exit $E_DIR_PERM
	elif [ ! -x "$1" ] || [ ! -r "$1" ]; then
		error "Directory '$1' not readable or executable."
		exit $E_DIR_PERM
	fi
}

# check_file - Check if a file exists and is writable.
# Args:
#   $1: File path to check.
check_file() {
	if [ -e "$1" ] && [ ! -w "$1" ]; then
		error "File '$1' is not writable."
		exit $E_GENERAL
	fi
}

# download_file - Download a single file from a given URL, with resume
# and mirror support.
# Args:
#   $1: Source URL or filename.
download_file() {
	# https://www.shellcheck.net/wiki/SC2155
	# shellcheck disable=SC2155
	local __LOCAL_FILENAME="$(get_filename "$1")"
	local __LOCAL_FILENAME_PARTIAL="$__LOCAL_FILENAME.partial"
	local __DOWNLOAD_CMD="${PKGMK_DOWNLOAD_PROG:-curl}"
	local __DOWNLOAD_URL=
	local __DOWNLOAD_OPTS=
	local __RESUME_CMD=
	local __RESUME_OPTS=
	local __BASENAME=
	local __REPO=
	local __ERROR=

	case $1 in
	*::http://* | *::https://* | *::ftp://* | *::file://* )
		__DOWNLOAD_URL=${1#*::}
		info "Downloading '$__DOWNLOAD_URL' as '$__LOCAL_FILENAME'"
		;;
	*)
		__DOWNLOAD_URL=$1
		info "Downloading '$__DOWNLOAD_URL'"
		;;
	esac

	if ! command -v "$__DOWNLOAD_CMD" >/dev/null; then
		error "Download command '$__DOWNLOAD_CMD' not found."
		exit $E_GENERAL
	fi

	case $__DOWNLOAD_CMD in
	aria2c)
		# --connect-timeout=10:
		# Set the connection timeout in seconds.
		#
		# --max-tries=3:
		# Set the number of tries.
		#
		# --retry-wait=3:
		# Set the seconds to wait between retries.
		__RESUME_CMD="-c"
		__DOWNLOAD_OPTS="--connect-timeout=10               \
				 --max-tries=3                      \
				 --retry-wait=3                     \
				 -d $PKGMK_SOURCE_DIR               \
				 -o ${__LOCAL_FILENAME_PARTIAL##*/} \
				 $PKGMK_ARIA2C_OPTS"
		;;
	curl)
		# --location:
		# If the server reports that the requested page has
		# moved to a different location (indicated with a
		# Location: header and a 3xx response code), make curl
		# redo the request on the new place.
		#
		# --fail:
		# Fail fast with no output at all on server errors.
		#
		# --ftp-pasv:
		# Use passive mode for the data connection.
		#
		# --retry 3:
		# If a transient error is returned when curl tries to
		# perform a transfer, it will retry this number of
		# times before giving up.
		#
		# --retry-delay 3:
		# Make curl sleep this amount of time before each
		# retry when a transfer has failed with a transient
		# error.
		__RESUME_CMD="-C -"
		__DOWNLOAD_OPTS="--location                         \
				 --fail                             \
				 --ftp-pasv                         \
				 --retry 3                          \
				 --retry-delay 3                    \
				 -o $__LOCAL_FILENAME_PARTIAL       \
				 $PKGMK_CURL_OPTS"
		;;
	wget)
		# --compression=none:
		# Do not ask the server to compress the file and do not
		# decompress any server response.
		#
		# --passive-ftp:
		# Use passive mode for the data connection.
		#
		# --no-directories:
		# Do not create a hierarchy of directories when
		# retrieving recursively and save data without
		# clobbering.
		#
		# --tries=3:
		# Set number of tries.
		#
		# --waitretry=3:
		# Wait 3 seconds between retries of failed downloads.
		__RESUME_CMD="-c"
		__DOWNLOAD_OPTS="--compression=none                   \
				 --passive-ftp                        \
				 --no-directories                     \
				 --tries=3                            \
				 --waitretry=3                        \
				 --directory-prefix=$PKGMK_SOURCE_DIR \
				 --output-document=$__LOCAL_FILENAME_PARTIAL \
				 $PKGMK_WGET_OPTS"
		;;
	esac

	if [ -f "$__LOCAL_FILENAME_PARTIAL" ]; then
		info "Partial download found, trying to resume"
		__RESUME_OPTS=$__RESUME_CMD
	fi

	__ERROR=1

	__BASENAME=$(get_basename "$__LOCAL_FILENAME")
	for __REPO in $PKGMK_SOURCE_MIRRORS; do
		__REPO="$(echo "$__REPO" | sed 's|/$||')"

		# Intentional word splitting.
		# https://www.shellcheck.net/wiki/SC2086
		# shellcheck disable=SC2086
		if $__DOWNLOAD_CMD  $__DOWNLOAD_OPTS  $__RESUME_OPTS \
		    "$__REPO/$__BASENAME"; then
			__ERROR=0
			break # exit mirror loop on success
		else
			__ERROR=$?
		fi
	done

	if [ $__ERROR != 0 ]; then
		while true; do
			# Intentional word splitting.
			# https://www.shellcheck.net/wiki/SC2086
			# shellcheck disable=SC2086
			$__DOWNLOAD_CMD  $__DOWNLOAD_OPTS \
			    $__RESUME_OPTS  "$__DOWNLOAD_URL"

			__ERROR=$?
			if [ $__ERROR != 0 ] && [ "$__RESUME_OPTS" ]; then
				info "Partial download failed, restarting"
				rm -f "$__LOCAL_FILENAME_PARTIAL"

				# Clear resume options for fresh
				# download
				__RESUME_OPTS=""
			else
				# Exit retry loop on non-resume
				# failure or success
				break
			fi
		done
	fi

	if [ $__ERROR != 0 ] || [ ! -f "$__LOCAL_FILENAME_PARTIAL" ]; then
		error "Downloading '$__DOWNLOAD_URL' failed."
		exit $E_DOWNLOAD
	fi

	mv -f "$__LOCAL_FILENAME_PARTIAL" "$__LOCAL_FILENAME"
}

# download_source - Download multiple source files listed in the
# 'source' variable.
download_source() {
	local __FILE=
	local __LOCAL_FILENAME=

	for __FILE in ${source}; do
		__LOCAL_FILENAME=$(get_filename "$__FILE")

		if [ -e "$__LOCAL_FILENAME" ]; then
			continue # Skip download if file already exists
		fi

		if [ "$__LOCAL_FILENAME" = "$__FILE" ]; then
			error "Source file '$__LOCAL_FILENAME' not found (cannot download, URL not specified)."
			exit $E_DOWNLOAD
		else
			if [ "$PKGMK_DOWNLOAD" = "yes" ]; then
				download_file "$__FILE"
			else
				error "Source file '$__LOCAL_FILENAME' not found (use -d option to download)."
				exit $E_DOWNLOAD
			fi
		fi
	done
}

# unpack_source - Unpack downloaded source files based on their
# extensions.
unpack_source() {
	local __FILE=
	local __LOCAL_FILENAME=
	local __COMMAND=

	for __FILE in ${source}; do
		__LOCAL_FILENAME=$(get_filename "$__FILE")

		case $__LOCAL_FILENAME in
		*.tar     | *.tar.gz | *.tar.Z | *.tgz      | *.tar.bz2 | \
		*.tbz2    | *.tar.xz | *.txz   | *.tar.lzma | *.tar.lz  | \
		*.tar.zst | *.tzst   | *.zst   | *.zip      | *.rpm     | \
		*.7z)
			# Unpack common archive formats using
			# bsdtar(1) with options:
			#
			# -p: Preserve file permissions.
			# -o: Use the user and group of the user
			#     running the program rather than those
			#     specified in the archive.
			#
			# Also, ignore extended attributes when
			# extracting tarballs:
			# --no-acls:         Ignore POSIX.1e or NFSv4 ACLs.
			# --no-xattrs:       Ignore extended file attributes.
			# --no-mac-metadata: Ignore MacOS X extended ACLs.
			# --no-fflags:       Ignore platform-specific file
			#                    attributes or file flags.
			__COMMAND="bsdtar -p -o --no-acls --no-xattrs --no-mac-metadata --no-fflags -C $SRC -xf $__LOCAL_FILENAME"
			;;
		*)
			# For other files, just copy to SRC directory
			__COMMAND="cp $__LOCAL_FILENAME $SRC"
			;;
		esac

		echo "$__COMMAND" # Log the unpack command

		if ! $__COMMAND; then # Execute the unpack command
			remove_work_dir
			error "Unpacking source file '$__LOCAL_FILENAME' failed."
			exit $E_UNPACK
		fi
	done
}

# make_md5sum - Compute and print out MD5 checksums of source files.
make_md5sum() {
	local __FILE=
	local __LOCAL_FILENAMES=

	if [ "${source}" ]; then
		for __FILE in ${source}; do
			__LOCAL_FILENAMES="$__LOCAL_FILENAMES $(get_filename "$__FILE")"
		done

		# Intentional word splitting.
		# https://www.shellcheck.net/wiki/SC2086
		# shellcheck disable=SC2086
		md5sum $__LOCAL_FILENAMES | sed -e 's:  .*/:  :' | sort -k 2
	fi
}

# check_md5sum - Check MD5 checksums of source files against a .md5sum
# file.
check_md5sum() {
	local __FILE="$PKGMK_WORK_DIR"/.tmp

	cd "$PKGMK_ROOT"

	if [ -f .md5sum ] && [ -s .md5sum ]; then
		make_md5sum       > "$__FILE.md5sum"
		sort -k 2 .md5sum > "$__FILE.md5sum.orig"

		# Compare generated and original md5sum files with the
		# following options:
		# -w:   Ignore all whitespace.
		# -t:   Expand tabs to spaces in output.
		# -U 0: Output 0 lines of unified context.
		diff -w -t -U 0           \
		  "$__FILE.md5sum.orig"   \
		  "$__FILE.md5sum"        \
		| sed '/^@@/d'            \
		| sed '/^+++/d'           \
		| sed '/^---/d'           \
		| sed 's/^+/NEW       /g' \
		| sed 's/^-/MISSING   /g' \
		> "$__FILE.md5sum.diff"

		if [ -s "$__FILE.md5sum.diff" ]; then
			error "MD5 checksum mismatch found:"
			cat "$__FILE.md5sum.diff" 1>&2

			remove_work_dir

			if [ "$PKGMK_CHECK_MD5SUM" = "yes" ]; then
				error "MD5 checksum verification failed."
				exit $E_MD5
			fi

			error "Building '$TARGET' failed due to MD5 checksum mismatch (non-fatal, MD5 check ignored)."
			exit $E_MD5
		fi
	else
		if [ "$PKGMK_CHECK_MD5SUM" = "yes" ]; then
			remove_work_dir
			info "MD5 checksum file not found"
			exit $E_MD5
		fi

		warning "MD5 checksum file not found, creating a new one"
		make_md5sum > .md5sum
	fi

	if [ "$PKGMK_CHECK_MD5SUM" = "yes" ]; then
		remove_work_dir
		info "MD5 checksum verification passed"
		exit 0
	fi
}

# strip_files - Strip debug symbols from executables and libraries in
# the package directory.
strip_files() {
	local __FILTER="cat" # Default filter to include all files

	if [ -f "$PKGMK_ROOT/.nostrip" ]; then
		# Filter out files listed in .nostrip
		__FILTER="grep -v -f $PKGMK_ROOT/.nostrip"
	fi

	cd "$PKG"

	# Find all files, print null-terminated names for safety.
	# Filter filenames based on .nostrip list.
	# Process files in parallel (up to JOBS)
	find . -type f -printf "%P\n"                 \
	| $__FILTER                                   \
	| xargs -r -L10 -P"${JOBS:-1}"                \
	  file --no-buffer --separator '>'            \
	    -e apptype -e ascii -e encoding -e tokens \
	    -e cdf -e compress -e tar -e text         \
	| awk '
BEGIN { FS = ">[ ]+" }
$0 ~ /ELF.*executable.*not stripped/    { print "--strip-all      \"" $1 "\"" }
$0 ~ /ELF.*shared object.*not stripped/ { print "--strip-unneeded \"" $1 "\"" }
$2 == "current ar archive"              { print "--strip-debug    \"" $1 "\"" }
'	| xargs -r -L1 -P"${JOBS:-1}" strip
}

# compress_manpages - Compress manual pages within the package
# directory using gzip.
compress_manpages() {
	local __FILE=
	local __TARGET=
	local __DIR=

	cd "$PKG"

	# Compress regular manpage files
	find . -type f -path "*/man/man*/*" | while read -r __FILE; do
		if [ "$__FILE" = "${__FILE%%.gz}" ]; then
			gzip -9 "$__FILE"
		fi
	done

	# Re-link manpage symlinks to point to compressed versions
	find . -type l -path "*/man/man*/*" | while read -r __FILE; do
		__TARGET=$(readlink -n "$__FILE")
		__TARGET="${__TARGET##*/}"
		__TARGET="${__TARGET%%.gz}.gz"
		rm -f "$__FILE"
		__FILE="${__FILE%%.gz}.gz"
		__DIR=$(dirname "$__FILE")

		if [ -e "$__DIR/$__TARGET" ]; then
			ln -sf "$__TARGET" "$__FILE"
		fi
	done
}

# make_footprint - Print out package footprint.
make_footprint() {
	pkginfo --footprint "$TARGET"
}

# check_footprint - Check package footprint against a .footprint file
# for regressions.
check_footprint() {
	local __FILE="$PKGMK_WORK_DIR/.tmp"

	cd "$PKGMK_ROOT"

	if [ -f "$TARGET" ]; then
		# Generate current footprint
		make_footprint > "$__FILE.footprint"

		if [ -f .footprint ]; then
			# Backup original footprint
			cp .footprint "$__FILE.footprint.orig"

			# Compare original and generated footprint
			# files, with the following options:
			# -w:   Ignore all whitespace.
			# -t:   Expand tabs to spaces in output.
			# -U 0: Output 0 lines of unified context.
			diff -w -t -U 0            \
			  "$__FILE.footprint.orig" \
			  "$__FILE.footprint"      \
			| sed '/^@@/d'             \
			| sed '/^+++/d'            \
			| sed '/^---/d'            \
			| sed 's/^+/NEW       /g'  \
			| sed 's/^-/MISSING   /g'  \
			> "$__FILE.footprint.diff"

			if [ -s "$__FILE.footprint.diff" ]; then
				# Mark build as not successful due to
				# footprint mismatch
				BUILD_SUCCESSFUL="no"

				error "Footprint mismatch found:"
				cat "$__FILE.footprint.diff" 1>&2
			fi
		else
			warning "Footprint file not found, creating a new one"

			# Move generated footprint to .footprint if
			# original not found
			mv "$__FILE.footprint" .footprint
		fi
	else
		# Mark build as not successful if package file is
		# missing
		BUILD_SUCCESSFUL="no"

		error "Package '$TARGET' was not found."
	fi
}

# make_work_dir - Create temporary working directories for package
# building.
make_work_dir() {
	PKG="$PKGMK_WORK_DIR/pkg" # Package staging directory
	SRC="$PKGMK_WORK_DIR/src" # Source extraction directory
	umask 022 # Set default umask for created files and directories

	cd "$PKGMK_ROOT"

	# Ensure clean work directory by removing existing one
	rm -rf "$PKGMK_WORK_DIR"

	mkdir -p "$SRC" "$PKG"

	# Run MD5 checksum check if not ignored
	if [ "$PKGMK_IGNORE_MD5SUM" = "no" ]; then
		check_md5sum
	fi
}

# remove_work_dir - Remove the temporary working directory
remove_work_dir() {
	# Remove work directory unless keeping working directory is
	# not specified
	if [ "$PKGMK_KEEP_WORK" = "no" ]; then
		rm -rf "$PKGMK_WORK_DIR"
	fi
}

# build_package - Orchestrate the entire package build process.
build_package() {
	local __COMPRESSION=

	BUILD_SUCCESSFUL="no"

	check_file "$TARGET"
	make_work_dir

	if [ "$(id -u)" != 0 ]; then
		warning "Packages should ideally built as root for proper permissions"
	fi

	# Log build start time
	info "Building '$TARGET' started $(date)"

	# Unpack source files into SRC directory
	unpack_source

	# Change current directory to SRC for build function execution
	cd "$SRC"

	# Execute the 'build' function from Pkgfile in a subshell with
	# -e (exit on error) and -x (xtrace)
	(set -e -x; build)

	# Check exit status of the build command
	# Intentional.
	# https://www.shellcheck.net/wiki/SC2181
	# shellcheck disable=SC2181
	if [ $? = 0 ]; then

		if [ "$PKGMK_NO_STRIP" = "yes" ]; then
			strip_files
		fi

		compress_manpages

		# Change directory to PKG for archive creation
		cd "$PKG"

		info "Build result:"

		# Determine compression extension based on specified
		# PKGMK_COMPRESSION_MODE:
		case $PKGMK_COMPRESSION_MODE in
		 gz) __COMPRESSION="-z"     ;;
		bz2) __COMPRESSION="-j"     ;;
		 xz) __COMPRESSION="-J"     ;;
		 lz) __COMPRESSION="--lzip" ;;
		zst) __COMPRESSION="--zstd" ;;
		esac

		# Create package archive using bsdtar and specified
		# format and compression with the following options:
		# -t: List archive contents to stdout.
		# -v: Produce output similar to that of ls(1).
		if bsdtar --format="$PKGMK_ARCHIVE_FORMAT"  \
			-c $__COMPRESSION -f "$TARGET" -- * \
		&& bsdtar -t -v -f "$TARGET"; then

			# Mark build as successful
			BUILD_SUCCESSFUL="yes"

			### XXX revise
			if [ "$PKGMK_IGNORE_FOOTPRINT" = "yes" ]; then
				warning "Footprint check is ignored"
			else
				# Check package footprint unless
				# ignored
				check_footprint
				if [ "$BUILD_SUCCESSFUL" = "no" ]; then
					remove_work_dir
					exit $E_FOOTPRINT
				fi
			fi
		fi
	fi

	remove_work_dir # Cleanup working directory after build

	if [ "$BUILD_SUCCESSFUL" = "yes" ]; then
		# Log build end time
		info "Building '$TARGET' succeeded $(date)"
	else
		if [ -f "$TARGET" ]; then
			# Update timestamp of target package to match
			# Pkgfile in case of failure, for build_needed
			# logic
			touch -r "$PKGMK_ROOT/Pkgfile" "$TARGET" \
				>/dev/null 2>&1
		fi

		error "Building '$TARGET' failed."
		exit $E_BUILD
	fi
}

# clean - Remove the build package and downloaded source files.
clean() {
	local __FILE=
	local __LOCAL_FILENAME=

	if [ -f "$TARGET" ]; then
		info "Removing $TARGET"
		rm -f "$TARGET" # Remove package file
	fi

	for __FILE in ${source}; do
		__LOCAL_FILENAME=$(get_filename "$__FILE")

		if [ -e "$__LOCAL_FILENAME"              ] \
		&& [    "$__LOCAL_FILENAME" != "$__FILE" ]; then
			info "Removing $__LOCAL_FILENAME"
			# Remove downloaded source file
			rm -f "$__LOCAL_FILENAME"
		fi
	done
}

# update_footprint - Update the .footprint file using the last built
# package.
update_footprint() {
	if [ ! -f "$TARGET" ]; then
		error "Unable to update footprint file.  Package '$TARGET' not found."
		exit $E_GENERAL
	fi

	check_file       .footprint  # Check if .footprint is writeable
	make_footprint > .footprint  # Generate new footprint
	touch "$TARGET"              # Update timestamp of package

	info "Footprint file updated"
}

# build_needed - Check if a package rebuild is needed based on
# timestamps.  Compares package file timestamp with Pkgfile and source
# files.
build_needed() {
	local __FILE=
	local __NEEDED="yes" # Assume rebuild is needed initially

	if [ -f "$TARGET" ]; then
		# If package exists, assume no rebuild needed unless
		# proven otherwise
		__NEEDED="no"

		for __FILE in $PKGMK_ROOT/Pkgfile ${source}; do
			__FILE=$(get_filename "$__FILE")

			# Check if source file is newer than target
			# package file.
			#
			# Intentional: "In POSIX sh, -nt is undefined".
			# https://www.shellcheck.net/wiki/SC3013
			#
			# Rationale: -nt is supported in many shells,
			# including bash(1), ksh(1), and dash(1),
			# which is used in Zeppe-Lin as default
			# /bin/sh provider.
			#
			# shellcheck disable=3013
			if [ -e "$__FILE" ] && ! test "$TARGET" -nt "$__FILE"; then
				# Rebuild needed if any source file is
				# newer
				__NEEDED="yes"

				# No need to check further source
				# files
				break
			fi
		done
	fi

	if [ "$__NEEDED" != yes ]; then
		return 1 # Indicate build not needed with exit code 1
	fi
}

######################################################################
# Section: Command-line helpers                                      #
# Functions for handling command-line arguments and options.         #
######################################################################

# print_help - Print the help message to stdout.
print_help() {
	cat <<EOF
Usage: pkgmk [option ...]
Make software package.

Mandatory arguments to long options are mandatory for short options too.
  -d,   --download          download missing source file(s)
  -do,  --download-only     do not build, only download missing source file(s)
  -eo,  --extract-only      do not build, only extract source file(s)
  -utd, --up-to-date        do not build, only check if package is up to date
  -uf,  --update-footprint  update footprint using result from last build
  -if,  --ignore-footprint  build package without checking footprint
  -um,  --update-md5sum     update md5sum
  -im,  --ignore-md5sum     build package without checking md5sum
  -cm,  --check-md5sum      do not build, only check md5sum
  -ns,  --no-strip          do not strip executable binaries and/or libraries
  -f,   --force             build package even if it appears to be up to date
  -c,   --clean             remove package and downloaded files
  -kw,  --keep-work         keep temporary working directory
  -af,  --archive-format=FORMAT
                            use the specified format for the created archive
  -cf,  --config-file=FILE  use alternative configuration file
  -v,   --version           print version and exit
  -h,   --help              print help and exit
EOF
}

# print_version - Print the script version to stdout.
print_version() {
	echo "pkgmk @VERSION@" # Placeholder for version string
}

# parse_options - Parse command-line options and set corresponding
# PKGMK_* variables.
# Args:
#   $@: Command-line arguments passed to the script.
parse_options() {
	while [ "$1" ]; do
		case $1 in
		-d|--download)
			PKGMK_DOWNLOAD="yes"
			;;
		-do|--download-only)
			PKGMK_DOWNLOAD="yes"
			PKGMK_DOWNLOAD_ONLY="yes"
			;;
		-eo|--extract-only)
			PKGMK_EXTRACT_ONLY="yes"
			;;
		-utd|--up-to-date)
			PKGMK_UP_TO_DATE="yes"
			;;
		-uf|--update-footprint)
			PKGMK_UPDATE_FOOTPRINT="yes"
			;;
		-if|--ignore-footprint)
			PKGMK_IGNORE_FOOTPRINT="yes"
			;;
		-um|--update-md5sum)
			PKGMK_UPDATE_MD5SUM="yes"
			;;
		-im|--ignore-md5sum)
			PKGMK_IGNORE_MD5SUM="yes"
			;;
		-cm|--check-md5sum)
			PKGMK_CHECK_MD5SUM="yes"
			;;
		-ns|--no-strip)
			PKGMK_NO_STRIP="yes"
			;;
		-f|--force)
			PKGMK_FORCE="yes"
			;;
		-c|--clean)
			PKGMK_CLEAN="yes"
			;;
		-kw|--keep-work)
			PKGMK_KEEP_WORK="yes"
			;;
		-af|--archive-format)
			PKGMK_ARCHIVE_FORMAT="$2"
			shift
			;;
		-af*)
			PKGMK_ARCHIVE_FORMAT="${1#-af}"
			;;
		--archive-format=*)
			PKGMK_ARCHIVE_FORMAT="${1#--archive-format=}"
			;;
		-cf|--config-file)
			PKGMK_CONFFILE="$(readlink -f "$2")"
			if [ ! "$PKGMK_CONFFILE" ]; then
				fatal "option $1 requires an argument"
			fi
			shift
			;;
		-cf*)
			PKGMK_CONFFILE="$(readlink -f "${1#-cf}")"
			if [ ! "$PKGMK_CONFFILE" ]; then
				fatal "option -cf requires an argument"
			fi
			;;
		--config-file=*)
			PKGMK_CONFFILE="$(readlink -f "${1#--config-file=}")"
			if [ ! "$PKGMK_CONFFILE" ]; then
				fatal "option --config-file requires an argument"
			fi
			;;
		-v|--version)
			print_version
			exit 0
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			fatal "invalid option -- '$1'"
			;;
		esac
		shift # Move to the next argument
	done
}

######################################################################
# Section: Main execution logic                                      #
# Main function and script initialization.                           #
######################################################################

# main - Main function of the pkgmk script.
# Args:
#   $@: Command-line arguments.
main() {
	local __FILE=

	# Variable to store target package filename, global scope
	# within main()
	TARGET=

	# Determine architecture (32 or 64 bit) based on '.32bit' file
	# presence
	if [ -f .32bit ]; then
		export PKGMK_ARCH=32
	else
		export PKGMK_ARCH=64 # Default to 64-bit (multilib consideration)
	fi

	# Parse command-line options.
	parse_options "$@"

	# Load configuration files (Pkgfile and optional config file)
	for __FILE in $PKGMK_ROOT/Pkgfile $PKGMK_CONFFILE; do
		if [ ! -f "$__FILE" ]; then
			error "File '$__FILE' not found."
			exit $E_GENERAL
		fi

		# Source the configuration file to load variables and
		# functions.
		#
		# Intentional: "can't follow non-constant source".
		# https://www.shellcheck.net/wiki/SC1090
		# shellcheck disable=SC1090
		. "$__FILE"
	done

	# Check required directories for existence and permissions
	check_directory "$PKGMK_SOURCE_DIR"
	check_directory "$PKGMK_PACKAGE_DIR"
	# Check parent directory of work directory
	check_directory "$(dirname "$PKGMK_WORK_DIR")"

	# Validate Pkgfile content
	check_pkgfile

	# Validate archive format against supported formats
	case $PKGMK_ARCHIVE_FORMAT in
	gnutar | pax | ustar | v7 )
		# Valid formats conform bsdtar(1) and
		# libarchive-formats(5)/"Tar Formats":
		# - pass through
		;;
	*)
		error "Archive format '$PKGMK_ARCHIVE_FORMAT' is not supported."
		exit $E_GENERAL
		;;
	esac

	# Construct target package filename based on compression mode
	# and package info
	case $PKGMK_COMPRESSION_MODE in
	gz | bz2 | xz | lz | zst)
		TARGET="$PKGMK_PACKAGE_DIR/$name#$version-$release.pkg.tar.$PKGMK_COMPRESSION_MODE"
		;;
	*)
		error "Compression mode '$PKGMK_COMPRESSION_MODE' is not supported."
		exit $E_GENERAL
		;;
	esac

	# Handle command-line actions based on flags
	if [ "$PKGMK_CLEAN" = "yes" ]; then
		clean # Remove package and downloaded sources
		exit 0
	fi

	if [ "$PKGMK_UPDATE_FOOTPRINT" = "yes" ]; then
		update_footprint # Update footprint file
		exit 0
	fi

	if [ "$PKGMK_UPDATE_MD5SUM" = "yes" ]; then
		download_source # Download sources (required for md5sum update)
		check_file    .md5sum # Check if .md5sum is writable
		make_md5sum > .md5sum # Generate new md5sum file
		info "MD5 checksum file updated"
		exit 0
	fi

	if [ "$PKGMK_DOWNLOAD_ONLY" = "yes" ]; then
		download_source # Only download source files
		exit 0
	fi

	if [ "$PKGMK_EXTRACT_ONLY" = "yes" ]; then
		download_source # Download source files
		make_work_dir   # Create work directory
		info "Extracting sources of package '$name-$version' to work directory"
		unpack_source   # Extract source files
		exit 0
	fi

	if [ "$PKGMK_UP_TO_DATE" = "yes" ]; then
		if build_needed; then
			info "Package '$TARGET' is not up to date"
		else
			info "Package '$TARGET' is up to date"
		fi
		exit 0
	fi

	# Default build process if no special flags are set
	if ! build_needed && [ "$PKGMK_FORCE" = "no" ] && [ "$PKGMK_CHECK_MD5SUM" = "no" ]; then
		info "Package '$TARGET' is up to date (use -f/--force to force rebuild)"
	else
		download_source
		build_package
	fi

	exit 0
}

######################################################################
# Section: Script initialization                                     #
# Set traps and default global variables.                            #
######################################################################

# Set trap handlers for interrupt signals and exit
trap "interrupted" HUP  INT  QUIT  TERM # Handle interrupt signals
trap "atexit"      EXIT                 # Call atexit on script exit

# Globals variable defaults - PKGMK_* variables control script
# behaviour:

# Set locale to C.UTF-8 for consistent string operations
export LC_ALL=C.UTF-8

# Root directory of the package build process (current working directory)
readonly PKGMK_ROOT="$PWD"

# Default archive format (gnutar, pax, ustar, v7)
PKGMK_ARCHIVE_FORMAT="gnutar"

# Default path for global configuration file
PKGMK_CONFFILE="/etc/pkgmk.conf"

# Default source mirror URLs (empty by default)
PKGMK_SOURCE_MIRRORS=

# Default source download directory (current working directory)
PKGMK_SOURCE_DIR="$PWD"

# Default package output directory (current working directory)
PKGMK_PACKAGE_DIR="$PWD"

# Default temporary working directory
PKGMK_WORK_DIR="$PWD/work"

# Default compression mode for package archives (gz, bz2, xz, lz, zst)
PKGMK_COMPRESSION_MODE="gz"

# Flag to enable/disable automatic source download
PKGMK_DOWNLOAD="no"

# Flag for download-only mode
PKGMK_DOWNLOAD_ONLY="no"

# Flag for extract-only mode
PKGMK_EXTRACT_ONLY="no"

# Flag for up-to-date check mode
PKGMK_UP_TO_DATE="no"

# Flag to update footprint file
PKGMK_UPDATE_FOOTPRINT="no"

# Flag to ignore footprint check during build
PKGMK_IGNORE_FOOTPRINT="no"

# Flag to force build even if package is up-to-date
PKGMK_FORCE="no"

# Flag to keep working directory after build
PKGMK_KEEP_WORK="no"

# Flag to update MD5 checksum file
PKGMK_UPDATE_MD5SUM="no"

# Flag to ignore MD5 checksum check during build
PKGMK_IGNORE_MD5SUM="no"

# Flag for checksum-only check mode
PKGMK_CHECK_MD5SUM="no"

# Flag to disable stripping of binaries and libraries
PKGMK_NO_STRIP="no"

# Flag for clean mode (remove package and sources)
PKGMK_CLEAN="no"

######################################################################
# Section: Script execution                                          #
# Invoke the main function with command-line arguments.              #
######################################################################

main "$@" # Execute the main function, passing command line arguments

# vim: ft=sh cc=72 tw=70
# End of file.
